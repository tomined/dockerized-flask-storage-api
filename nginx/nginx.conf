# nginx/nginx.conf (located in the nginx/ directory)

# The 'events' block specifies Nginx's event processing model.
# It's a mandatory block but often kept empty for basic configurations.
events {}

# The 'http' block contains directives that define how HTTP traffic is handled.
http {
    # The 'server' block defines a virtual server configuration.
    server {
        # Configures Nginx to listen on port 443 (standard HTTPS port)
        # and enables SSL/TLS for this server block.
        listen 443 ssl;

        # Specifies the domain name or IP address this server block responds to.
        # 'localhost' is used for local development. In production, this would be your domain name.
        server_name localhost; # Or your actual IP/domain name

        # Specifies the path to the SSL certificate file.
        # This file contains the public key and is presented to clients for secure communication.
        ssl_certificate      /etc/nginx/certs/server.crt;
        # Specifies the path to the SSL certificate key file.
        # This file contains the private key corresponding to the certificate.
        ssl_certificate_key  /etc/nginx/certs/server.key;

        # The 'location' block defines how Nginx handles requests for specific URIs.
        # This particular block handles all incoming requests to the root path ("/").
        location / {
            # Proxies requests to the upstream 'app' service listening on port 8000.
            # 'app' here refers to the service name defined in your docker-compose.yml,
            # which Docker's internal DNS resolves to the 'app' container's IP.
            proxy_pass http://app:8000;
            # Sets the 'Host' header in the request forwarded to the backend.
            # $host variable preserves the original host requested by the client.
            proxy_set_header Host $host;
            # Passes the client's original IP address to the backend application.
            proxy_set_header X-Real-IP $remote_addr;
            # Appends the client's IP to the 'X-Forwarded-For' header,
            # useful for logging and identifying the true client behind multiple proxies.
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # Passes the original protocol (HTTP or HTTPS) to the backend application,
            # useful for the backend to know if the connection was secure.
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}